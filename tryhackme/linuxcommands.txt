echo
whoami

man
man ls (gives manual for ls)

ls
ls -a (or --all)
ls -h (human-readable)

cd
cat
pwd

wc (word count)
wc -l (find lines)

find (find files/folders)
find -name *.txt

grep (search contents)
grep "81.143.211.90" access.log

Operators:
& - run commands in the background of your terminal.
&& - combine multiple commands together in one line of your terminal.
e.g. command1 && command2 (command2 will only run if command1 is successful).

>	- redirector, take the output from a command (such as using cat to output a file) and direct it elsewhere.
>>	- same function of the > operator but appends the output rather than replacing (meaning nothing is overwritten).

Secure Shell or SSH
ssh username@MACHINE_IP

touch - Create file
mkdir	- make directory
cp - copy
mv - move / rename

rm - remove
rm -R (remove directory)
rm -rf (remove all)

file - Determine the type of a file

su - switch users
su user2
su -l user2 (starts a shell  more similar to the actual user logging into the system - we inherit a lot more properties of the new user, i.e., environment variables and the like). 


Permissions:
Read Write Execute
r (read): 4
w (write): 2
x (execute): 1
typically written as e.g.: drwxr-xr-x
d= directory
rwx rwx rwx --> owner of file , user group that owns file, others.
If you want all to have rwx privileges, just add up the numbers: 777.

Change Permissions using chmod
chmod [ugoa][+-][rwx] file
e.g. chmod u+r filename.txt

Explanation:
u (user permissions)
g (group permissions)
o (other permissions)
a (all)
+ (add) (can also be "-" meaning "remove")
rwx (read write execute)
filename

Change owner: chown
Change group: chgrp

Special Permission - SUID (u+s, u+S if you don't want them to have x permissions).
Replaces user x. Special permission for the user access level.
Always executes as the user who owns the file, no matter who is passing the command.

Special Permission - SGID (g+s, g+S if you don't want them to have x permissions).
Replaces group x. SGID allows a file to be executed as the group owner of the file.
A file created in the directory has its group ownership set to the directory owner.
This is helpful for directories used collaboratively among different members of a group because all members can access and execute new files.

Sticky Bit (o+t)
Doesn't affect individual files. Prevents file deletion within a directory when it's set to a directory.
Only the owner (and root) of a file can remove the file within that directory. 

Numeric Permissions:
None: Blank
SUID: 4
SGID: 2
Sticky Bit: 1

chmod [Special][user][group][other] e.g. 7400 = SUID set, SGID Set, Sticky bit set. User read permissions set.

Common Directories
/etc --> system files. 
/etc/shadow (a system file in Linux that stores encrypted user passwords and is accessible only to the root user)
/etc/passwd (plain text file with information for all user accounts) 

/var --> stores data frequently accessed / written by services or applications running on the system.
/var/log used to store logs

/usr --> contains user directories
/root --> root dir
/tmp

Text Editors
nano
nano filename
Ctrl+X to exit.

VIM

wget [URL] - download file
scp - Secure Copy from an SSH connection
e.g. scp LOCAL_DIRECTORY/LOCAL_SOURCE_FILENAME remoteuser@REMOTEMACHINEIP:/REMOTE_DIRECTORY/REMOTE_DESTINATION_FILENAME 
scp remoteuser@REMOTEMACHINEIP:/REMOTE_DIRECTORY/REMOTE_SOURCE_FILENAME LOCAL_DIRECTORY/LOCAL_DESTINATION_FILENAME

Create a quick web server to then use wget to pull data from
python3 -m http.server


Processes
ps : list running processes.
ps aux : see processes run by other users, and those that don't run from a session (e.g. system processes)
top : real-time stats about processes running on the system (refresh every 10 secs)
kill [PID]: Kill process with ProcessID written.

Can send the following with kill:
e.g. kill [PID] SIGTERM
SIGTERM - Kill the process, but allow it to do some cleanup tasks beforehand
SIGKILL - Kill the process - doesn't do any cleanup after the fact
SIGSTOP - Stop/suspend a process

The Operating System (OS) uses namespaces to ultimately split up the resources available on the computer to (such as CPU, RAM and priority) processes. 
Think of it as splitting your computer up into slices -- similar to a cake.
Processes within that slice will have access to a certain amount of computing power, however, it will be a small portion of what is actually available to every process overall.

Namespaces are great for security as it is a way of isolating processes from another -- only those that are in the same namespace will be able to see each other.

The process with an ID of 0 is a process that is started when the system boots. This process is the system's init on Ubuntu, such as systemd, which is used to provide a way of managing a user's processes and sits in between the operating system and the user. For example, once a system boots and it initialises, systemd is one of the first processes that are started. Any program or piece of software that we want to start will start as what's known as a child process of systemd. This means that it is controlled by systemd, but will run as its own process (although sharing the resources from systemd) to make it easier for us to identify and the likes.

Get Processes/Services to start on boot
systemctl [option] [service] - allows us to interact with systemd process/daemon (the suite that kickstarts the rest of the system)
e.g. systemctl start apache2 -> Start the apache2 process.

Options:
start
stop
enable
disable

Background a process - add "&" operator to the end of the command / Ctrl+Z - also used to pause execution of a script.
Foreground a process - fg

Automation using cron

cron is the process
crontab -e to edit a crontab, read by cron.

Crontab: One of the processes that's started during boot. Responsible for facilitating and managing cron jobs.
A file with formatting recognised by cron process to execute each line step by step.
6 values needed:
MIN	- What minute to execute at
HOUR - What hour to execute at
DOM - What day of the month to execute at
MON - What month of the year to execute at
DOW - What day of the week to execute at
CMD - The actual command that will be executed.
* - wildcard, "don't really care what it is".

e.g. backup every 12 hours:
0 *12 * * * cp -R /home/cmnatic/Documents /var/backups/

Packages and Software Repos
/etc/apt - When developers wish to submit software to the community, they will submit it to an  "apt" repository. If approved, their programs and tools will be released into the wild.

Additional repositories can be added by using
add-apt-repository
command or by listing another provider! 


Example of adding a repo that isn't a part of the default ubuntu repos:
Download the GPG key and use apt-key to trust it - needed to safety check before a download (if it doesn't match, the software won't download)
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -

Add the repo to our apt sources list. Good practice to have a separate file for every different community/3rd party repo we add.
cd /etc/apt/sources.list.d
touch sublime-text.list
nano sublime-text.list
Write the following:
deb https://download.sublimetext.com/ apt/stable/
Ctrl+X to save and exit.

apt update (update apt to recognise the new entry)
apt install [software] : Install software 

apt install sublime-text

Remove a repo:
add-apt-repository --remove ppa:PPA_Name/ppa
Or delete the file we previously added to.
Then apt remove [software]

Logs
located in /var/log
